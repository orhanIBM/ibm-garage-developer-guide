{"componentChunkName":"component---src-pages-admin-artifactory-setup-index-mdx","path":"/admin/artifactory-setup/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Artifactory Setup"},"relativePagePath":"/admin/artifactory-setup/index.mdx","titleType":"page","MdxNode":{"id":"48bb2af0-ee56-5ac9-ad95-6af59ac6ace5","children":[],"parent":"a4d6753e-de66-5fcf-b421-3415dd4f9922","internal":{"content":"---\ntitle: Artifactory Setup\n---\n\n<PageDescription>\n\nComplete the steps for setting up the Artifactory tool\n\n</PageDescription>\n\n## Overview\n\nArtifactory is the [Developer Tools environment's artifact repository manager](/guides/artifact-management).\nBefore you can use it as part of the [continious integration pipeline](/guides/continuous-integration), \nit first must be configured as part of the environment.\n\n##  Configuration\n\nSet up Artifactory in the Developer Tools environment with a Helm repository.\nAlso, set up the Developer Tools environment to access Artifactory.\n\n### Set up Artifactory\n\nCreate a repository in Artifactory for storing Helm charts.\n\n- Open the Artifactory dashboard from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\nThe first time you log into Artifactory, it is unconfigured and displays its Onboarding Wizard, starting with the Welcome page.\n\n- Press **Next**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/initialjfrog.png)\n\n  </ArtDirection>\n\nThe next page in the wizard is the Configure a Proxy Server page. This is to setup a proxy for external resources. You can skip this\nstep.\n\n- Press **Skip**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/setupproxy.png)\n\n  </ArtDirection>\n\nThe next page in the wizard is the Create Repositories page. Since Artifactory doesn't have a specific package type for Helm charts, \ncreate a repository for storing generic artifacts.\n\n- Select **Generic**, then press **Create**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/createrepository.png)\n\n  </ArtDirection>\n\nThe next page in the wizard is the Onboarding Complete page. \n\n- Press **Finish**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/completejfrog.png)\n\n  </ArtDirection>\n\n### Allow Anonymous Access to Artifactory\n\n- Open the Artifactory dashboard from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\n- Click on the 'Admin' icon at the bottom of the left nav then select 'Security Configuration' from the top of the middle column of the menu\n    ![Security Configuration](/images/artifactory-admin-pane.png)\n\n- Check the `Allow Anonymous Access` check box and press `Save`\n\n### Obtain encrypted password\n\nTo enable the CI pipelines ([Jenkins](/guides/continuous-integration), [Tekton](/guides/continuous-integration-tekton), etc.) to store the Helm artifacts in the Artifactory repository, we need to obtain \nArtifactory's encrypted password and store this where the pipeline can access it--in the `artifactory-access` Kubernetes secret in the `tools` namespace in the Development Tools environment.\n\n- In the Artifactory console, press the **Welcome, admin** menu button in the top right corner of the console and select **Edit profile**\n\n- In the User Profile: admin page, enter you Artifactory password and press **Unlock**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/jfrogapikey.png)\n\n  </ArtDirection>\n\nBelow, in the **Authentication Settings** section, is the **Encrypted Password** field.\n\n- Press the **Eye** icon to view the encrypted password and press the **Cut & Paste** icon to copy it\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/viewapikey.png)\n\n  </ArtDirection>\n\n[Kubernetes secrets](https://kubernetes.io/docs/concepts/configuration/secret/#creating-a-secret-manually) \nstore data in base64 format. So to store Artifactory's encrypted password in a secret, it needs to be encoded into base64.\n\nAny base64 encoding tool will work. For example:\n\n- Go to the [Base64 Encode](https://www.base64encode.org/) website\n\n- Paste the encrypted password into the online tool and press the **Encode** button\n\n- In the field below, copy the encoded value into you clipboard or store it somewhere safe\n\n### Update the Kubernetes secret\n\nStore the base64 encrypted password for Artifactory in the Kubernetes secret for accessing Artifactory.\n\n- Open your Development Tools environment's Kubernetes Console or OpenShift Console\n\n- Navigate to the `tools` namespace and `secrets` view\n\n- Find the secret named `artifactory-access` and open it in the Edit view\n\n<Row>\n<Column colMd={4} colLg={5} noGutterMdLeft>\n\n## OpenShift\n\n<ArtDirection>\n\n![Initial JFrog](/images/addkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n<Column colMd={4} colLg={6} noGutterMdLeft>\n\n## Kubernetes\n\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\n- Find the `ARTIFACTORY_ENCRPT` value (under `data`) and paste in the Artifactory base64 key into the field\n\n- Press **Save** in OpenShift Console or **Update** in Kubernetes Dashboard\n\n- View the secret in the console and confirm that the visible value of `ARTIFACTORY_ENCRPT` matches the encrypted password shown in the Artifactory console\n\n## Rerun the Pipeline\n\nPreviously, when you deployed you first app, the pipeline's Package Helm Chart stage didn't store the chart because \nthe `ARTIFACTORY_ENCRPT` property was not set. Now that it is set, rerun your pipeline and check that the Helm chart for you app is stored correctly in Artifactory with matching semantic version information.\n\n- In the Artifactory console, select the Artifacts page and expand the `generic-local` repository\n\n  <ArtDirection>\n\n  ![Artifact Repository Browser](/images/artifact-repo-browser.png)\n\n  </ArtDirection>\n\nYou will see a folder named after your resource group containing the tar file for a Helm chart.\n\n## Conclusion\n\nArtifactory is now set up in your Developer Tools environment and CI pipelines can store Helm charts in Artifactory repository. \n","type":"Mdx","contentDigest":"67f140ab08a97dcb0637da612682caa3","counter":463,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Artifactory Setup"},"exports":{},"rawBody":"---\ntitle: Artifactory Setup\n---\n\n<PageDescription>\n\nComplete the steps for setting up the Artifactory tool\n\n</PageDescription>\n\n## Overview\n\nArtifactory is the [Developer Tools environment's artifact repository manager](/guides/artifact-management).\nBefore you can use it as part of the [continious integration pipeline](/guides/continuous-integration), \nit first must be configured as part of the environment.\n\n##  Configuration\n\nSet up Artifactory in the Developer Tools environment with a Helm repository.\nAlso, set up the Developer Tools environment to access Artifactory.\n\n### Set up Artifactory\n\nCreate a repository in Artifactory for storing Helm charts.\n\n- Open the Artifactory dashboard from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\nThe first time you log into Artifactory, it is unconfigured and displays its Onboarding Wizard, starting with the Welcome page.\n\n- Press **Next**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/initialjfrog.png)\n\n  </ArtDirection>\n\nThe next page in the wizard is the Configure a Proxy Server page. This is to setup a proxy for external resources. You can skip this\nstep.\n\n- Press **Skip**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/setupproxy.png)\n\n  </ArtDirection>\n\nThe next page in the wizard is the Create Repositories page. Since Artifactory doesn't have a specific package type for Helm charts, \ncreate a repository for storing generic artifacts.\n\n- Select **Generic**, then press **Create**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/createrepository.png)\n\n  </ArtDirection>\n\nThe next page in the wizard is the Onboarding Complete page. \n\n- Press **Finish**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/completejfrog.png)\n\n  </ArtDirection>\n\n### Allow Anonymous Access to Artifactory\n\n- Open the Artifactory dashboard from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\n- Click on the 'Admin' icon at the bottom of the left nav then select 'Security Configuration' from the top of the middle column of the menu\n    ![Security Configuration](/images/artifactory-admin-pane.png)\n\n- Check the `Allow Anonymous Access` check box and press `Save`\n\n### Obtain encrypted password\n\nTo enable the CI pipelines ([Jenkins](/guides/continuous-integration), [Tekton](/guides/continuous-integration-tekton), etc.) to store the Helm artifacts in the Artifactory repository, we need to obtain \nArtifactory's encrypted password and store this where the pipeline can access it--in the `artifactory-access` Kubernetes secret in the `tools` namespace in the Development Tools environment.\n\n- In the Artifactory console, press the **Welcome, admin** menu button in the top right corner of the console and select **Edit profile**\n\n- In the User Profile: admin page, enter you Artifactory password and press **Unlock**\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/jfrogapikey.png)\n\n  </ArtDirection>\n\nBelow, in the **Authentication Settings** section, is the **Encrypted Password** field.\n\n- Press the **Eye** icon to view the encrypted password and press the **Cut & Paste** icon to copy it\n\n  <ArtDirection>\n\n  ![Initial JFrog](/images/viewapikey.png)\n\n  </ArtDirection>\n\n[Kubernetes secrets](https://kubernetes.io/docs/concepts/configuration/secret/#creating-a-secret-manually) \nstore data in base64 format. So to store Artifactory's encrypted password in a secret, it needs to be encoded into base64.\n\nAny base64 encoding tool will work. For example:\n\n- Go to the [Base64 Encode](https://www.base64encode.org/) website\n\n- Paste the encrypted password into the online tool and press the **Encode** button\n\n- In the field below, copy the encoded value into you clipboard or store it somewhere safe\n\n### Update the Kubernetes secret\n\nStore the base64 encrypted password for Artifactory in the Kubernetes secret for accessing Artifactory.\n\n- Open your Development Tools environment's Kubernetes Console or OpenShift Console\n\n- Navigate to the `tools` namespace and `secrets` view\n\n- Find the secret named `artifactory-access` and open it in the Edit view\n\n<Row>\n<Column colMd={4} colLg={5} noGutterMdLeft>\n\n## OpenShift\n\n<ArtDirection>\n\n![Initial JFrog](/images/addkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n<Column colMd={4} colLg={6} noGutterMdLeft>\n\n## Kubernetes\n\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\n- Find the `ARTIFACTORY_ENCRPT` value (under `data`) and paste in the Artifactory base64 key into the field\n\n- Press **Save** in OpenShift Console or **Update** in Kubernetes Dashboard\n\n- View the secret in the console and confirm that the visible value of `ARTIFACTORY_ENCRPT` matches the encrypted password shown in the Artifactory console\n\n## Rerun the Pipeline\n\nPreviously, when you deployed you first app, the pipeline's Package Helm Chart stage didn't store the chart because \nthe `ARTIFACTORY_ENCRPT` property was not set. Now that it is set, rerun your pipeline and check that the Helm chart for you app is stored correctly in Artifactory with matching semantic version information.\n\n- In the Artifactory console, select the Artifacts page and expand the `generic-local` repository\n\n  <ArtDirection>\n\n  ![Artifact Repository Browser](/images/artifact-repo-browser.png)\n\n  </ArtDirection>\n\nYou will see a folder named after your resource group containing the tar file for a Helm chart.\n\n## Conclusion\n\nArtifactory is now set up in your Developer Tools environment and CI pipelines can store Helm charts in Artifactory repository. \n","fileAbsolutePath":"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/admin/artifactory-setup/index.mdx"}}}}