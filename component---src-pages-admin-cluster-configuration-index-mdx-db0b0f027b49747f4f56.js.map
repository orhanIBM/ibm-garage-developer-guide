{"version":3,"sources":["webpack:///./src/pages/admin/cluster-configuration/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-admin-cluster-configuration-index-mdx-db0b0f027b49747f4f56.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Within the created Kubernetes or OpenShift cluster there are a number secrets\nand config maps that are either provided by the IBM Cloud public environment and\nutilized by the Terraform scripts or are created during the Terraform provisioning\nprocess.`}</p>\n    </PageDescription>\n    <h2 {...{\n      \"id\": \"namespaces\"\n    }}>{`Namespaces`}</h2>\n    <p>{`The Iteration Zero scripts create four namespaces that are used by the components deployed into the cluster: `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`staging`}</inlineCode>{`. The actual names used for the namespaces are provided in Terraform variables with the\ndefaults being those listed. The variables are then passed into the namespaces module in `}<inlineCode parentName=\"p\">{`stage1-namespaces.tf`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"provided-resources\"\n    }}>{`Provided resources`}</h2>\n    <h3 {...{\n      \"id\": \"tls-secret\"\n    }}>{`TLS secret`}</h3>\n    <p>{`When the cluster is created, a secret containing the TLS certs for the ingress subdomain is provided in the\n`}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` namespace. The the name of the secret is based off of the cluster name with some rules applied to limit the\nlength and replace disallowed characters.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` To avoid issues with the naming conventions for the secret, the Iteration Zero scripts look for the secret\nthat has a `}<inlineCode parentName=\"p\">{`tls.key`}</inlineCode>{` value: `}<inlineCode parentName=\"p\">{`kubectl get secrets -o jsonpath='{.items[?(@.data.tls\\\\.key != \"\")].metadata.name}'`}</inlineCode>{`.\nIdeally this would be identified using a label and a selectorâ€¦`}</p>\n    <p>{`During the Iteration Zero process, the TLS secret is copied into each of the four namespaces created and used by the\nIteration Zero processes.`}</p>\n    <h3 {...{\n      \"id\": \"pull-secrets\"\n    }}>{`Pull secrets`}</h3>\n    <p>{`Pull secrets for the IBM Cloud Image Registry are generated in the cluster as part of the Iteration Zero process to\nprepare the namespaces. The secrets are initially created in the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` namespace with the following names:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`default-icr-io`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`default-{region}-icr-io`}</inlineCode>{` `}</li>\n    </ul>\n    <p>{`During the namespace preparation process, the pull secrets are copied into the different namespaces with `}<inlineCode parentName=\"p\">{`default-`}</inlineCode>{`\nprefix dropped. E.g.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`icr-io`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`{region}-icr-io`}</inlineCode></li>\n    </ul>\n    <p>{`The pull secrets are also added to the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` service account in each of the namespaces. As a result, it is not\nnecessary to directly reference the pull secret as long as the pod runs under the default service account.`}</p>\n    <h2 {...{\n      \"id\": \"created-resources\"\n    }}>{`Created resources`}</h2>\n    <p>{`The following resources are all created during the Iteration Zero provisioning process. These resources\nare used generally to expose the config of the installed tools but specifically used by the CI pipeline (`}<a parentName=\"p\" {...{\n        \"href\": \"/ibm-garage-developer-guide/guides/continuous-integration\"\n      }}>{`Jenkins`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/ibm-garage-developer-guide/guides/continuous-integration-tekton\"\n      }}>{`Tekton`}</a>{`, etc.) to interact with the deployed tools. The resources are bound as optional environment variables\nin the containers used within the pipeline so if a particular tool has not been installed the\nassociated environment variables wonâ€™t be set. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`  envFrom:\n    - configMapRef:\n        name: pactbroker-config\n        optional: true\n    - configMapRef:\n        name: sonarqube-config\n        optional: true\n    - secretRef:\n        name: sonarqube-access\n        optional: true\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"ibm-cloud-config\"\n    }}>{`IBM Cloud config`}</h3>\n    <p>{`The Iteration Zero script creates a config map and secret named `}<inlineCode parentName=\"p\">{`ibmcloud-config`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ibmcloud-access`}</inlineCode>{`\nin the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` namespace that contains the relevant configuration values for the cluster within the IBM\nCloud account. The config map and secret are copied into each of the Iteration Zero namespaces as the\nnamespaces are created.`}</p>\n    <h4 {...{\n      \"id\": \"ibmcloud-config-config-map\"\n    }}><inlineCode parentName=\"h4\">{`ibmcloud-config`}</inlineCode>{` config map`}</h4>\n    <p>{`The following values are collected:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`CLUSTER_TYPE - the type of cluster (kubernetes or openshift)`}</li>\n      <li parentName=\"ul\">{`APIURL - the api url used to connect to the IBM Cloud environment`}</li>\n      <li parentName=\"ul\">{`SERVER_URL - the server url used to connect to the cluster, particularly for OpenShift`}</li>\n      <li parentName=\"ul\">{`RESOURCE_GROUP - the IBM Cloud resource group where the cluster has been installed`}</li>\n      <li parentName=\"ul\">{`REGISTRY_URL - the url to the image registry`}</li>\n      <li parentName=\"ul\">{`REGISTRY_NAMESPACE - the namespace within the image registry where images will be stored`}</li>\n      <li parentName=\"ul\">{`REGION - the IBM Cloud region where where the cluster has been installed`}</li>\n      <li parentName=\"ul\">{`CLUSTER_NAME - the name of the cluster`}</li>\n      <li parentName=\"ul\">{`INGRESS_SUBDOMAIN - the subdomain for the cluster to use in building ingress urls`}</li>\n      <li parentName=\"ul\">{`TLS_SECRET_NAME - the name of the secret that contains the TLS certificate information`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"ibmcloud-access-secret\"\n    }}><inlineCode parentName=\"h4\">{`ibmcloud-access`}</inlineCode>{` secret`}</h4>\n    <p>{`The following values are collected:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`APIKEY - the IBM Cloud apikey used to access the environment`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"argocd-config\"\n    }}>{`ArgoCD config`}</h3>\n    <h4 {...{\n      \"id\": \"argocd-config-config-map\"\n    }}><inlineCode parentName=\"h4\">{`argocd-config`}</inlineCode>{` config map`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`ARGOCD_URL - the url of the ArgoCD ingress`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"argocd-access-secret\"\n    }}><inlineCode parentName=\"h4\">{`argocd-access`}</inlineCode>{` secret`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`ARGOCD_PASSWORD - the password for the argocd user`}</li>\n      <li parentName=\"ul\">{`ARGOCD_USER - the user id of the argocd user`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"artifactory-config\"\n    }}>{`Artifactory config`}</h3>\n    <h4 {...{\n      \"id\": \"artifactory-config-config-map\"\n    }}><inlineCode parentName=\"h4\">{`artifactory-config`}</inlineCode>{` config map`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`ARTIFACTORY_URL - the url for the Artifactory ingress`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"artifactory-access-config-map\"\n    }}><inlineCode parentName=\"h4\">{`artifactory-access`}</inlineCode>{` config map`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`ARTIFACTORY_USER - the user name of the admin user`}</li>\n      <li parentName=\"ul\">{`ARTIFACTORY_PASSWORD - the password for the admin user`}</li>\n      <li parentName=\"ul\">{`ARTIFACTORY_ENCRPT - the encrypted password for the admin user. This value is initially blank\nand must be updated after the value is generated in the UI`}</li>\n      <li parentName=\"ul\">{`ARTIFACTORY_ADMIN_ACCESS_USER - the admin access user`}</li>\n      <li parentName=\"ul\">{`ARTIFACTORY_ADMIN_ACCESS_PASSWORD - the admin access password`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"jenkins-config\"\n    }}>{`Jenkins config`}</h3>\n    <h4 {...{\n      \"id\": \"jenkins-config-config-map\"\n    }}><inlineCode parentName=\"h4\">{`jenkins-config`}</inlineCode>{` config map`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`JENKINS_HOST - the host name of the Jenkins ingress`}</li>\n      <li parentName=\"ul\">{`JENKINS_URL - the url of the Jenkins ingress`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"jenkins-access-secret\"\n    }}><inlineCode parentName=\"h4\">{`jenkins-access`}</inlineCode>{` secret`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`api_token - the Jenkins api token`}</li>\n      <li parentName=\"ul\">{`host - the host name of the Jenkins ingress`}</li>\n      <li parentName=\"ul\">{`url - the url of the Jenkins ingress`}</li>\n      <li parentName=\"ul\">{`username - the Jenkins user name`}</li>\n      <li parentName=\"ul\">{`password - the Jenkins password`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"pactbroker-config\"\n    }}>{`PactBroker config`}</h3>\n    <h4 {...{\n      \"id\": \"pactbroker-config-config-map\"\n    }}><inlineCode parentName=\"h4\">{`pactbroker-config`}</inlineCode>{` config map`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`PACTBROKER_URL - the url of the Pact Broker ingress`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"sonarqube-config\"\n    }}>{`SonarQube config`}</h3>\n    <h4 {...{\n      \"id\": \"sonarqube-config-config-map\"\n    }}><inlineCode parentName=\"h4\">{`sonarqube-config`}</inlineCode>{` config map`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`SONARQUBE_URL - the url of the SonarQube ingress`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"sonarqube-access-secret\"\n    }}><inlineCode parentName=\"h4\">{`sonarqube-access`}</inlineCode>{` secret`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`SONARQUBE_USER - the user name of the SonarQube user`}</li>\n      <li parentName=\"ul\">{`SONARQUBE_PASSWORD - the password of the SonarQube user`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}