{"version":3,"sources":["webpack:///./src/pages/guides/solsa/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","Tabs","Tab","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","label","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-guides-solsa-index-mdx-afe922d2798257bf2bcc.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`SolSA makes it possible to specify the software architecture of Kubernetes-managed cloud applications as JavaScript or TypeScript programs.`}</p>\n    </PageDescription>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Kubernetes is becoming the de facto standard for managing applications in the cloud. Thanks to `}<a parentName=\"p\" {...{\n        \"href\": \"https://operatorhub.io/\"\n      }}>{`operators`}</a>{`, Kubernetes can be extended to manage virtually any kind of application resources: not only containers and microservices, but also virtual machines, cloud functions and events, managed cloud services, policies, meshes, etc. Each resource can be declared and configured with a few lines of YAML. However, while YAML is a fine language to perform some basic configuration, SolSA is designed to enable application developers to reason about applications at a higher-level of abstraction using familiar languages and development tools.`}</p>\n    <p>{`The SolSA library for Node.js —a shorthand for Solution Service Architecture — makes it possible to specify the architecture of cloud applications as programs. SolSA enables developers to configure Kubernetes-managed resources by writing JavaScript or TypeScript code instead of YAML. SolSA automatically translates the developer written code to the required lower-level YAML. SolSA integrates with IDEs such as Visual Studio Code to provide online validation, code completion, and documentation of the various resources and configuration parameters.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`solsa`}</inlineCode>{` CLI is included in the `}<a parentName=\"p\" {...{\n        \"href\": \"/ibm-garage-developer-guide/guides/tools-image\"\n      }}>{`Tools Image`}</a>{` and is pre-configured as a plugin to the `}<a parentName=\"p\" {...{\n        \"href\": \"/ibm-garage-developer-guide/guides/continuous-delivery\"\n      }}>{`ArgoCD instance`}</a>{` installed in the `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{` namespace of your cluster. No further setup is needed for basic usage of SolSA.  To enable full IDE support, you will need to install the `}<inlineCode parentName=\"p\">{`solsa`}</inlineCode>{` package using npm in the same manner in which you would install any npm package you want to use in your IDE. Some typical installation options are discussed in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/solsa#solsa-setup\"\n      }}>{`SolSA setup instructions`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"usage-scenarios\"\n    }}>{`Usage Scenarios`}</h2>\n    <p>{`SolSA can be applied in any scenario where it is desirable to use a higher-level of abstraction to programmatically generate YAML to be applied to a Kubernetes or OpenShift cluster.  The use of SolSA is particularly compelling to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Specify the architecture of complex applications composed of multiple Kubernetes resources. SolSA augments the base Kubernetes resources with additional abstractions that simplify the specification of common patterns and reduce the amount of code written.`}</li>\n      <li parentName=\"ul\">{`Enable full IDE-support for your software architecture, including validation, code assist, and integrated documentation of Kubernetes resources and operators.`}</li>\n      <li parentName=\"ul\">{`Allow a single architecture specification to be programmatically specialized to different contexts (eg. dev vs. test vs. prod).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"specification-of-kubernetes-resources\"\n    }}>{`Specification of Kubernetes Resources`}</h3>\n    <p>{`Deploying just a single microservice that is accessible outside of a Kubernetes cluster requires specifying three related Kubernetes resources: a `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{`, a `}<inlineCode parentName=\"p\">{`Service`}</inlineCode>{`, and an `}<inlineCode parentName=\"p\">{`Ingress`}</inlineCode>{`. SolSA simplifies this task by reducing the amount of repetitive code a developer needs to write and maintain.`}</p>\n    <p>{`To illustrate how to use SolSA to specify the architecture of a simple cloud native application, we use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://istio.io/docs/examples/bookinfo/\"\n      }}>{`Bookinfo sample application`}</a>{` from the Istio project. Bookinfo consists of four containerized microservices: an externally exposed productpage service that is implemented using three internal backend microservices.`}</p>\n    <p>{`The tabs below contain two variants of the SolSA specification of Bookinfo’s architecture and the (identical) Kubernetes YAML that is generated from either one of these specifications by the `}<inlineCode parentName=\"p\">{`solsa`}</inlineCode>{` CLI.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"SolSA ContainerizedService\" mdxType=\"Tab\">\n        <p>{`A very common Kubernetes pattern is the combination of a `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`Service`}</inlineCode>{` to implement a single logical microservice. SolSA’s `}<inlineCode parentName=\"p\">{`ContainerizedService`}</inlineCode>{` provides a higher level abstraction for this pattern that allows the developer to specify the essential elements while eliding virtually all of the Kubernetes-specific details. As shown below, simple microservices can be specified very concisely. By providing additional arguments to the `}<inlineCode parentName=\"p\">{`ContainerizedService`}</inlineCode>{` constructor it is possible to control many aspects of the generated YAML. Specifying that the `}<inlineCode parentName=\"p\">{`productpage`}</inlineCode>{` service should be exposed outside the cluster is declared by invoking `}<inlineCode parentName=\"p\">{`getIngress`}</inlineCode>{` passing the desired virtual host name `}<inlineCode parentName=\"p\">{`bookinfo`}</inlineCode>{`.`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`let solsa = require('solsa')\n\nlet details = new solsa.ContainerizedService({ name: 'details', image: 'istio/examples-bookinfo-details-v1:1.15.0', port: 9080 })\nlet ratings = new solsa.ContainerizedService({ name: 'ratings', image: 'istio/examples-bookinfo-ratings-v1:1.15.0', port: 9080 })\nlet reviews = new solsa.ContainerizedService({ name: 'reviews', image: 'istio/examples-bookinfo-reviews-v1:1.15.0', port: 9080 })\nlet productpage = new solsa.ContainerizedService({ name: 'productpage', image: 'istio/examples-bookinfo-productpage-v1:1.15.0', port: 9080 })\nproductpage.env = {\n  DETAILS_HOSTNAME: details.name,\n  RATINGS_HOSTNAME: ratings.name,\n  REVIEWS_HOSTNAME: reviews.name\n}\nlet entry = productpage.getIngress({ vhost: 'bookinfo' })\n\nmodule.exports = new solsa.Bundle({ details, ratings, reviews, productpage, entry })\n`}</code></pre>\n      </Tab>\n      <Tab label=\"SolSA Deployment\" mdxType=\"Tab\">\n        <p>{`The SolSA library includes fully integrated support for all Kubernetes resource types. The (much larger) code block below shows how Bookinfo would be specified in SolSA directly using the Kubernetes native concept of `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{`.  Working at this lower level of abstraction requires that the developer be more familiar with Kubernetes concepts, but enables full control over all aspects of the generated YAML.  Notice that even when working directly with `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{`, the developer is still able to elide the details of the `}<inlineCode parentName=\"p\">{`Service`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Ingress`}</inlineCode>{` resources by using SolSA’s `}<inlineCode parentName=\"p\">{`getService`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`getIngress`}</inlineCode>{` methods which derive all the necessary information the underlying `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{`. Thus even when working at a Kubernetes-native level of abstraction, SolSA can eliminate some of the repetitive and error prone coding present when working purely at the YAML level.`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`let solsa = require('solsa')\n\nlet details = new solsa.apps.v1.Deployment({\n  metadata: { name: 'details' },\n  spec: {\n    selector: { matchLabels: { 'solsa.ibm.com/pod': 'details' } },\n    replicas: 1,\n    template: {\n      spec: {\n        containers: [\n          {\n            name: 'details',\n            image: 'istio/examples-bookinfo-details-v1:1.15.0',\n            env: [{ name: 'PORT', value: '9080' }],\n            ports: [{ containerPort: 9080 }],\n            livenessProbe: { tcpSocket: { port: 9080 } },\n            readinessProbe: { tcpSocket: { port: 9080 } }\n          }\n        ]\n      }\n    }\n  }\n})\nlet detailsService = details.getService()\n\nlet reviews = new solsa.apps.v1.Deployment({\n  metadata: { name: 'reviews' },\n  spec: {\n    selector: { matchLabels: { 'solsa.ibm.com/pod': 'reviews' } },\n    replicas: 1,\n    template: {\n      spec: {\n        containers: [\n          {\n            name: 'reviews',\n            image: 'istio/examples-bookinfo-reviews-v1:1.15.0',\n            env: [{ name: 'PORT', value: '9080' }],\n            ports: [{ containerPort: 9080 }],\n            livenessProbe: { tcpSocket: { port: 9080 } },\n            readinessProbe: { tcpSocket: { port: 9080 } }\n          }\n        ]\n      }\n    }\n  }\n})\nlet reviewsService = reviews.getService()\n\nlet ratings = new solsa.apps.v1.Deployment({\n  metadata: { name: 'ratings' },\n  spec: {\n    selector: { matchLabels: { 'solsa.ibm.com/pod': 'ratings' } },\n    replicas: 1,\n    template: {\n      spec: {\n        containers: [\n          {\n            name: 'ratings',\n            image: 'istio/examples-bookinfo-ratings-v1:1.15.0',\n            env: [{ name: 'PORT', value: '9080' }],\n            ports: [{ containerPort: 9080 }],\n            livenessProbe: { tcpSocket: { port: 9080 } },\n            readinessProbe: { tcpSocket: { port: 9080 } }\n          }\n        ]\n      }\n    }\n  }\n})\nlet ratingsService = ratings.getService()\n\nlet productpage = new solsa.apps.v1.Deployment({\n  metadata: { name: 'productpage' },\n  spec: {\n    selector: { matchLabels: { 'solsa.ibm.com/pod': 'productpage' } },\n    replicas: 1,\n    template: {\n      spec: {\n        containers: [\n          {\n            name: 'productpage',\n            image: 'istio/examples-bookinfo-productpage-v1:1.15.0',\n            env: [\n              { name: 'PORT', value: '9080' },\n              { name: 'DETAILS_HOSTNAME', value: details.metadata.name },\n              { name: 'RATINGS_HOSTNAME', value: ratings.metadata.name },\n              { name: 'REVIEWS_HOSTNAME', value: reviews.metadata.name }\n            ],\n            ports: [{ containerPort: 9080 }],\n            livenessProbe: { tcpSocket: { port: 9080 } },\n            readinessProbe: { tcpSocket: { port: 9080 } }\n          }\n        ]\n      }\n    }\n  }\n})\nlet productpageService = productpage.getService()\nlet ingress = productpageService.getIngress({ vhost: 'bookinfo' })\n\nmodule.exports = new solsa.Bundle({ details, detailsService, reviews, reviewsService, ratings, ratingsService, productpage, productpageService, ingress })\n`}</code></pre>\n      </Tab>\n      <Tab label=\"Generated YAML\" mdxType=\"Tab\">\n        <p>{`Shown below is the output from `}<inlineCode parentName=\"p\">{`solsa yaml`}</inlineCode>{` when applied to either of the two Bookinfo specifications.`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: v1\nkind: Service\nmetadata:\n  name: details\nspec:\n  ports:\n  - port: 9080\n    targetPort: 9080\n  selector:\n    solsa.ibm.com/pod: details\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: productpage\nspec:\n  ports:\n  - port: 9080\n    targetPort: 9080\n  selector:\n    solsa.ibm.com/pod: productpage\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ratings\nspec:\n  ports:\n  - port: 9080\n    targetPort: 9080\n  selector:\n    solsa.ibm.com/pod: ratings\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: reviews\nspec:\n  ports:\n  - port: 9080\n    targetPort: 9080\n  selector:\n    solsa.ibm.com/pod: reviews\n  type: ClusterIP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: details\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      solsa.ibm.com/pod: details\n  template:\n    metadata:\n      labels:\n        solsa.ibm.com/pod: details\n    spec:\n      containers:\n      - env:\n        - name: PORT\n          value: \"9080\"\n        image: istio/examples-bookinfo-details-v1:1.15.0\n        livenessProbe:\n          tcpSocket:\n            port: 9080\n        name: details\n        ports:\n        - containerPort: 9080\n        readinessProbe:\n          tcpSocket:\n            port: 9080\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: productpage\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      solsa.ibm.com/pod: productpage\n  template:\n    metadata:\n      labels:\n        solsa.ibm.com/pod: productpage\n    spec:\n      containers:\n      - env:\n        - name: PORT\n          value: \"9080\"\n        - name: DETAILS_HOSTNAME\n          value: details\n        - name: RATINGS_HOSTNAME\n          value: ratings\n        - name: REVIEWS_HOSTNAME\n          value: reviews\n        image: istio/examples-bookinfo-productpage-v1:1.15.0\n        livenessProbe:\n          tcpSocket:\n            port: 9080\n        name: productpage\n        ports:\n        - containerPort: 9080\n        readinessProbe:\n          tcpSocket:\n            port: 9080\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ratings\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      solsa.ibm.com/pod: ratings\n  template:\n    metadata:\n      labels:\n        solsa.ibm.com/pod: ratings\n    spec:\n      containers:\n      - env:\n        - name: PORT\n          value: \"9080\"\n        image: istio/examples-bookinfo-ratings-v1:1.15.0\n        livenessProbe:\n          tcpSocket:\n            port: 9080\n        name: ratings\n        ports:\n        - containerPort: 9080\n        readinessProbe:\n          tcpSocket:\n            port: 9080\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: reviews\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      solsa.ibm.com/pod: reviews\n  template:\n    metadata:\n      labels:\n        solsa.ibm.com/pod: reviews\n    spec:\n      containers:\n      - env:\n        - name: PORT\n          value: \"9080\"\n        image: istio/examples-bookinfo-reviews-v1:1.15.0\n        livenessProbe:\n          tcpSocket:\n            port: 9080\n        name: reviews\n        ports:\n        - containerPort: 9080\n        readinessProbe:\n          tcpSocket:\n            port: 9080\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: productpage\nspec:\n  rules:\n  - host: bookinfo.mycluster.us-east.containers.appdomain.cloud\n    http:\n      paths:\n      - backend:\n          serviceName: productpage\n          servicePort: 9080\n        path: /\n  tls:\n  - hosts:\n    - bookinfo.mycluster.us-east.containers.appdomain.cloud\n    secretName: mycluster\n`}</code></pre>\n      </Tab>\n    </Tabs>\n    <h3 {...{\n      \"id\": \"using-solsa-with-kubernetes-operators\"\n    }}>{`Using SolSA with Kubernetes Operators`}</h3>\n    <p>{`The SolSA library includes JavaScript/TypeScript bindings for every Kubernetes Operator available on\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://operatorhub.io/\"\n      }}>{`OperatorHub.io`}</a>{`.  These enables full IDE-support for defining applications that utilize operators to manage the life-cycles of some portions of their resources.`}</p>\n    <p>{`As an example, the tabs below show the SolSA specification and the generated YAML of a simple language translation application in which a microservice defined using SolSA’s `}<inlineCode parentName=\"p\">{`ContainerzedService`}</inlineCode>{` abstraction is combined with an instance of the Watson Translator service on the IBM Public Cloud. The IBM Cloud Operator is used to instantiate the Watson Translator Service instance and make the credentials for accessing it available to the dependent microservice via a Kubernetes secret.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"SolSA\" mdxType=\"Tab\">\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`\nconst path = require('path')\nconst solsa = require('solsa')\n\nfunction translator ({ name, language }) {\n  let watson = new solsa.LanguageTranslator({ name: 'watson-translator-for-' + name })\n  let translator = new solsa.ContainerizedService({ name, image: 'solsa-translator', build: path.join(__dirname, 'solsa-translator'), port: 8080 })\n  translator.env = { LANGUAGE: { value: language }, WATSON_URL: watson.getSecret('url'), WATSON_APIKEY: watson.getSecret('apikey') }\n  let ingress = translator.getIngress()\n  return new solsa.Bundle({ watson, translator, ingress })\n}\n\nmodule.exports = translator({ name: 'my-translator', language: 'en' })\n`}</code></pre>\n      </Tab>\n      <Tab label=\"YAML\" mdxType=\"Tab\">\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: ibmcloud.ibm.com/v1alpha1\nkind: Service\nmetadata:\n  name: watson-translator-for-my-translator\nspec:\n  plan: lite\n  serviceClass: language-translator\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-translator\nspec:\n  ports:\n  - port: 8080\n    targetPort: 8080\n  selector:\n    solsa.ibm.com/pod: my-translator\n  type: ClusterIP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-translator\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      solsa.ibm.com/pod: my-translator\n  template:\n    metadata:\n      labels:\n        solsa.ibm.com/pod: my-translator\n    spec:\n      containers:\n      - env:\n        - name: PORT\n          value: \"8080\"\n        - name: LANGUAGE\n          value: en\n        - name: WATSON_URL\n          valueFrom:\n            secretKeyRef:\n              key: url\n              name: watson-translator-for-my-translator\n        - name: WATSON_APIKEY\n          valueFrom:\n            secretKeyRef:\n              key: apikey\n              name: watson-translator-for-my-translator\n        image: docker.io/solsa/solsa-translator\n        livenessProbe:\n          tcpSocket:\n            port: 8080\n        name: my-translator\n        ports:\n        - containerPort: 8080\n        readinessProbe:\n          tcpSocket:\n            port: 8080\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: my-translator\nspec:\n  rules:\n  - host: my-translator.mycluster.us-east.containers.appdomain.cloud\n    http:\n      paths:\n      - backend:\n          serviceName: my-translator\n          servicePort: 8080\n        path: /\n  tls:\n  - hosts:\n    - my-translator.mycluster.us-east.containers.appdomain.cloud\n    secretName: mycluster\n---\napiVersion: ibmcloud.ibm.com/v1alpha1\nkind: Binding\nmetadata:\n  name: watson-translator-for-my-translator\nspec:\n  serviceName: watson-translator-for-my-translator\n\n`}</code></pre>\n      </Tab>\n    </Tabs>\n    <h3 {...{\n      \"id\": \"using-solsa-with-argocd\"\n    }}>{`Using SolSA with ArgoCD`}</h3>\n    <p>{`The usage of ArgoCD is described in more detail in the `}<a parentName=\"p\" {...{\n        \"href\": \"/ibm-garage-developer-guide/guides/continuous-delivery/\"\n      }}>{`continuous delivery`}</a>{` section of this guide. A SolSA-specified application can be used in exactly the same workflows as an application specified by a Helm chart or Kustomize tree. The only additional step is to inform ArgoCD that it should use its SolSA plugin to generate the YAML for the application. In the instructions below, we will continue using the Bookinfo sample from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/solsa-examples\"\n      }}>{`solsa-examples`}</a>{` git repo. The main SolSA file for this application is `}<inlineCode parentName=\"p\">{`instance.js`}</inlineCode></p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"ArgoCD UI\" mdxType=\"Tab\">\n        <ol>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`Log into ArgoCD`}</p>\n          </li>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`Click `}<inlineCode parentName=\"p\">{`New Application`}</inlineCode>{` and provide the following values:`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`application name`}</inlineCode>{` - dev-bookinfo`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`project`}</inlineCode>{` - default`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sync-policy`}</inlineCode>{` - `}<inlineCode parentName=\"li\">{`Automatic with pruning`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`repository url`}</inlineCode>{` - `}<a parentName=\"li\" {...{\n                  \"href\": \"https://github.com/IBM/solsa-examples.git\"\n                }}>{`https://github.com/IBM/solsa-examples.git`}</a></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`revision`}</inlineCode>{` - HEAD`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{` - examples/bookinfo`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`destination cluster`}</inlineCode>{` - `}<a parentName=\"li\" {...{\n                  \"href\": \"https://kubernetes.default.svc\"\n                }}>{`https://kubernetes.default.svc`}</a></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`destination namespace`}</inlineCode>{` - dev`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`Click the `}<inlineCode parentName=\"p\">{`EDIT AS YAML`}</inlineCode>{` button and add the plugin stanza shown below to the `}<inlineCode parentName=\"p\">{`source:`}</inlineCode>{` block`}</p>\n          </li>\n        </ol>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`source:\n  plugin:\n    name: solsa\n    env:\n      - name: SOLSA_APP_MAIN\n        value: instance.js\n`}</code></pre>\n        <p>{`Finally deploy Bookinfo by clicking the Create button.`}</p>\n      </Tab>\n      <Tab label=\"Textual CRD\" mdxType=\"Tab\">\n        <p>{`ArgoCD Applications can also be specified without using the ArgoCD UI by defining an `}<inlineCode parentName=\"p\">{`argoproj.io.Application`}</inlineCode>{` Custom Resource. In this style of management you\ncreate a `}<inlineCode parentName=\"p\">{`bookinfoApp.yaml`}</inlineCode>{` file containing the YAML shown below and then either check it into a git repo that ArgoCD is monitoring\nor directly apply it to your cluster via `}<inlineCode parentName=\"p\">{`kubectl apply -f bookinfoApp.yaml -n tools`}</inlineCode>{`. Within a few seconds, the Bookinfo application should be deployed to your `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` namespace.`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: bookinfo\nspec:\n  project: default\n  source:\n    repoURL: 'https://github.com/IBM/solsa-examples.git'\n    path: examples/bookinfo\n    targetRevision: HEAD\n    plugin:\n      name: solsa\n      env:\n        - name: SOLSA_APP_MAIN\n          value: instance.js\n  destination:\n    server: 'https://kubernetes.default.svc'\n    namespace: dev\n  syncPolicy:\n    automated:\n      prune: true\n`}</code></pre>\n      </Tab>\n    </Tabs>\n    <h2 {...{\n      \"id\": \"more-information\"\n    }}>{`More Information`}</h2>\n    <p>{`Additional information on SolSA, including `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/solsa-examples\"\n      }}>{`a tutorial and sample applications`}</a>{`, is available from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/solsa\"\n      }}>{`SolSA open source project`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}