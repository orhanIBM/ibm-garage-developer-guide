{"version":3,"sources":["webpack:///./src/pages/getting-started/cli/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-getting-started-cli-index-mdx-0e115defafc8e6775ec4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The Developer Tools include the IBM Garage for Cloud (IGC) Developer Tools Command Line Interface (CLI)`}</p>\n    </PageDescription>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli\"\n      }}>{`IGC CLI`}</a>{`\nprovides a set of helpful utilities that can be invoked from the command line. Its key objective is to make complicated CLI tasks and `}<inlineCode parentName=\"p\">{`YAML`}</inlineCode>{`,`}<inlineCode parentName=\"p\">{`configMap`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`secret`}</inlineCode>{` configuration easier for a developer.`}</p>\n    <p>{`These utilities include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Register your application’s git repo into a CI pipeline (`}<a parentName=\"li\" {...{\n          \"href\": \"/ibm-garage-developer-guide/guides/continuous-integration\"\n        }}>{`Jenkins`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/ibm-garage-developer-guide/guides/continuous-integration-tekton\"\n        }}>{`Tekton`}</a>{`, etc.)`}</li>\n      <li parentName=\"ul\">{`List the ingress URLs for the tools installed in the environment`}</li>\n      <li parentName=\"ul\">{`List the user names and passwords for the tools installed in the environment`}</li>\n      <li parentName=\"ul\">{`Build and deploy images to the environment using the IBM Cloud Image Registry`}</li>\n      <li parentName=\"ul\">{`Help copy `}<inlineCode parentName=\"li\">{`configMaps`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`secrets`}</inlineCode>{` into new projects/namespace in Kubernetes or OpenShift`}</li>\n    </ul>\n    <p>{`To use the IGC CLI, it must be installed and your terminal and you are logged into IBM Cloud with the IBM Cloud CLI.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`Follow these steps to use the IGC CLI:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Install the CLI:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`npm i -g @garage-catalyst/ibm-garage-cloud-cli\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Run the CLI’s help command to list the available commands:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc --help\n`}</code></pre>\n        <p parentName=\"li\">{`  The help output looks like this:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`% igc --help\nIBM Garage Cloud CLI\n\nUsage: igc <command> [args]\n\nCommands:\n  igc jenkins-auth           Generate a Jenkins api token and register it as\n                             kubernetes secret\n  igc gen-token              Generate a Jenkins api token\n  igc pipeline               Register a pipeline for the current code repository\n                             in Jenkins                      [aliases: register]\n  igc git-webhook            Create a git webhook for a given Jenkins pipeline\n  igc dashboard              Open the dashboard url in the default browser\n  igc build                  Build the image and push it into the IBM Cloud\n                             registry\n  igc deploy                 Deploy an image from the IBM Cloud registry into a\n                             kubernetes cluster\n  igc tools                  Launch the IBM Garage for Cloud tools image\n                             connected to the current directory\n  igc vlan                   Print out the vlan values\n  igc credentials            Lists the urls and credentials for the tools\n                             deployed to the cluster\n  igc ingress                List the current ingress hosts for deployed apps in\n                             a namespace\n  igc tool-config            Create the config map and secret for a tool\n                             configured in the environment\n  igc namespace <namespace>  Create a namespace (if it doesn't exist) and\n                             prepare it with the necessary configuration\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"use-the-cli\"\n    }}>{`Use the CLI`}</h2>\n    <p>{`To use the IGC CLI you must be logged into your\nIBM Cloud account using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/cli\",\n        \"title\": \"IBM Cloud CLI and Developer Tools\"\n      }}>{`IBM Cloud CLI`}</a>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Log into your IBM Cloud account with the correct region and resource group:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Once logged in, you can use the CLI commands.`}</p>\n        <p parentName=\"li\">{`  For example, this command lists the dashboard ingress URLs for all of the install tools in the tools namespace:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc ingress -n tools\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"available-commands\"\n    }}>{`Available commands`}</h2>\n    <h3 {...{\n      \"id\": \"vlan\"\n    }}>{`vlan`}</h3>\n    <p>{`Lists the `}<inlineCode parentName=\"p\">{`vlans`}</inlineCode>{` for a particular `}<inlineCode parentName=\"p\">{`resource group`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`region`}</inlineCode>{`. The command\nexpects that an `}<inlineCode parentName=\"p\">{`ibmcloud login`}</inlineCode>{` has already been performed to set up the\nenvironment. This information is useful for preparing Terraform cluster creation steps`}</p>\n    <h3 {...{\n      \"id\": \"credentials\"\n    }}>{`credentials`}</h3>\n    <p>{`Prints the urls and credentials for the tools deployed into the cluster.\nThis includes Jenkins, Argo CD, and SonarQube, Pact, Artifactory.`}</p>\n    <h3 {...{\n      \"id\": \"ingress\"\n    }}>{`ingress`}</h3>\n    <p>{`Lists the ingress urls for the provided namespace. If no namespace\nis provided, `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` is used.`}</p>\n    <h3 {...{\n      \"id\": \"pipeline\"\n    }}>{`pipeline`}</h3>\n    <p>{`Registers a git repository project as a Jenkins pipeline by creating a Kubernetes secret to hold\nthe Git authentication information, calling the Jenkins API, and creating a web-hook.\nThis command is intended to be run within the repository directory of a project for\nwhich a pipeline should be generated. You can supply a new namespace for your pipeline`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`igc pipeline -n team-a\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"namespace\"\n    }}>{`namespace`}</h3>\n    <p>{`Creates a new namespace/project in your cluster and copies the necessary `}<inlineCode parentName=\"p\">{`configMaps`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`secrets`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{` namespace.\nThis enables new pipelines to be registered and run and for them to have access to all the essential data needed to access the tools and the IBM Cloud platfrom.`}</p>\n    <h3 {...{\n      \"id\": \"tools\"\n    }}>{`tools`}</h3>\n    <p>{`Launches the `}<inlineCode parentName=\"p\">{`ibm-garage-cli-tools`}</inlineCode>{` docker image in an interactive\nterminal. This image provides commonly used infrastructure tools like,\n`}<inlineCode parentName=\"p\">{`terraform`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`oc`}</inlineCode>{` etc.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}